#!/usr/bin/env bash

# this is a simple config for herbstluftwm

hc() {
    herbstclient "$@"
}

so() {
    source "$XDG_CONFIG_HOME/herbstluftwm/$@"
}

so snow.sh

hc emit_hook reload

xsetroot -solid $darkgrey
nitrogen --restore &

# remove all existing keybindings
hc keyunbind --all

# keybindings
AltKey=Mod1
SuperKey=Mod4
Mod=$SuperKey # Herbst Mod Key
Term=kitty

# Applications
hc keybind $Mod-Shift-q quit
hc keybind $Mod-Shift-r reload
hc keybind $Mod-w close_or_remove
hc keybind $Mod-Shift-Return spawn $Term
# hc keybind $Mod-Return spawn dmenu_run -fn "Fira Code:size=14" -p "dmenu:"
hc keybind $Mod-p spawn rofi -modi drun -show combi
hc keybind $Mod-b spawn microsoft-edge-dev
hc keybind $Mod-c spawn caprine

#       ⎧         ⎫   ⎧ h (or ←) ⎫         ⎧ focus frame  ⎫ ⎧ left
#       ⎪ Alt     ⎪   ⎪ j (or ↓) ⎪  means  ⎪ split frame  ⎪ ⎪ down
# Mod + ⎨ Shift   ⎬ + ⎨ k (or ↑) ⎬  ═════> ⎨ move window  ⎬ ⎨ up
#       ⎩ Control ⎭   ⎩ l (or →) ⎭         ⎩ resize frame ⎭ ⎩ right

# basic movement in tiling and floating mode
# focusing clients
hc keybind $Mod-Left  focus left
hc keybind $Mod-Down  focus down
hc keybind $Mod-Up    focus up
hc keybind $Mod-Right focus right
hc keybind $Mod-h     focus left
hc keybind $Mod-j     focus down
hc keybind $Mod-k     focus up
hc keybind $Mod-l     focus right

# moving clients in tiling and floating mode
hc keybind $Mod-Shift-Left  shift left
hc keybind $Mod-Shift-Down  shift down
hc keybind $Mod-Shift-Up    shift up
hc keybind $Mod-Shift-Right shift right
hc keybind $Mod-Shift-h     shift left
hc keybind $Mod-Shift-j     shift down
hc keybind $Mod-Shift-k     shift up
hc keybind $Mod-Shift-l     shift right

# splitting frames
hc keybind $Mod-$AltKey-Left   split   left    0.5
hc keybind $Mod-$AltKey-Down   split   bottom  0.5
hc keybind $Mod-$AltKey-Up     split   top     0.5
hc keybind $Mod-$AltKey-Right  split   right   0.5
hc keybind $Mod-$AltKey-h      split   left    0.5
hc keybind $Mod-$AltKey-j      split   bottom  0.5
hc keybind $Mod-$AltKey-k      split   top     0.5
hc keybind $Mod-$AltKey-l      split   right   0.5

# let the current frame explode into subframes
hc keybind $Mod-x split explode

# resizing frames and floating clients
resizestep=0.02
hc keybind $Mod-Control-h       resize left +$resizestep
hc keybind $Mod-Control-j       resize down +$resizestep
hc keybind $Mod-Control-k       resize up +$resizestep
hc keybind $Mod-Control-l       resize right +$resizestep
hc keybind $Mod-Control-Left    resize left +$resizestep
hc keybind $Mod-Control-Down    resize down +$resizestep
hc keybind $Mod-Control-Up      resize up +$resizestep
hc keybind $Mod-Control-Right   resize right +$resizestep

# layouting
hc keybind $Mod-f set_attr clients.focus.floating toggle
hc keybind $Mod-Shift-f fullscreen toggle
hc keybind $Mod-Shift-m set_attr clients.focus.minimized true
# restore all minimized windows of the focused tag
hc keybind $Mod-Ctrl-m foreach CLIENT clients. \
     sprintf MINATT "%c.minimized" CLIENT \
     sprintf TAGATT "%c.tag" CLIENT and \
       , compare MINATT "=" "true" \
       , substitute FOCUS "tags.focus.name" compare TAGATT "=" FOCUS \
       , set_attr MINATT false
# The following cycles through the available layouts within a frame, but skips
# layouts, if the layout change wouldn't affect the actual window positions.
# I.e. if there are two windows within a frame, the grid layout is skipped.
hc keybind $Mod-y                                               \
            or , and . compare tags.focus.curframe_wcount = 2   \
                     . cycle_layout +1 vertical horizontal max  \
               , cycle_layout +1 vertical horizontal grid max

# mouse
hc mouseunbind --all
hc mousebind $Mod-Button1 move
hc mousebind $Mod-Button2 zoom
hc mousebind $Mod-Button3 resize

# focus
hc keybind $Mod-BackSpace   cycle_monitor
hc keybind $Mod-Tab         cycle_all +1
hc keybind $Mod-Shift-Tab   cycle_all -1
hc keybind $Mod-i jumpto urgent

# rules
hc unrule -F
#hc rule class=XTerm tag=3 # move all xterms to tag 3
hc rule focus=on # normally focus new clients
# give focus to most common terminals
#hc rule class~'(.*[Rr]xvt.*|.*[Tt]erm|Konsole)' focus=on
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(DIALOG|UTILITY|SPLASH)' pseudotile=on
hc rule windowtype='_NET_WM_WINDOW_TYPE_DIALOG' focus=on
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(NOTIFICATION|DOCK|DESKTOP)' manage=off
#stupid rules
hc rule class='Matplotlib' floating=on

# tags
tag_names=( {1..9} )
tag_keys=( {1..9} 0 )

hc rename default "${tag_names[0]}" || true
for i in "${!tag_names[@]}" ; do
    hc add "${tag_names[$i]}"
    hc load $i '(clients horizontal:0)'
    key="${tag_keys[$i]}"
    if ! [ -z "$key" ] ; then
        hc keybind "$Mod-$key" use_index "$i"
        hc keybind "$Mod-Shift-$key" move_index "$i"
    fi
done

# cycle through tags
hc keybind $Mod-period use_index +1
hc keybind $Mod-comma  use_index -1

# lock tags
hc keybind $Mod-Shift-g lock_tag
hc keybind $Mod-g       unlock_tag

# APPEARANCE
# hc set always_show_frame                  false
# hc set auto_detect_monitors               false
# hc set auto_detect_panels                 true
# hc set default_direction_external_only    false
hc set default_frame_layout               horizontal
# hc set focus_crosses_monitor_boundaries   true
hc set focus_follows_mouse                true
# hc set focus_stealing_prevention          true

hc set frame_gap                     30
# hc set frame_border_active_color     $blue
# hc set frame_border_normal_color     $black
hc set frame_border_width            0
# hc set frame_border_inner_color      black
# hc set frame_border_inner_width      0
hc set frame_bg_active_color         $grey
hc set frame_bg_normal_color         $black
hc set frame_active_opacity          40
hc set frame_normal_opacity          0
hc set frame_bg_transparent          false
hc set frame_transparent_width       0
hc set frame_padding                 0

# hc set gapless_grid                  true
# hc set hide_covered_windows          false
# hc set monitors_locked               0
# hc set mouse_recenter_gap            0
# hc set pseudotile_center_threshold   10
# hc set raise_on_click                true
# hc set raise_on_focus                false
# hc set raise_on_focus_temporarily    false
hc set smart_frame_surroundings      false
hc set smart_window_surroundings     false
hc set snap_distance                 15
hc set snap_gap                      10
hc set swap_monitors_to_get_tag      false
hc set tree_style '╾│ ├└╼─┐'
# hc set update_dragged_clients        false
# hc set verbose                       false

# hc set window_border_active_color    unkown
# hc set window_border_inner_color     unkown
# hc set window_border_inner_width     unkown
# hc set window_border_normal_color    unkown
# hc set window_border_urgent_color    unkown
# hc set window_border_width           unkown
hc set window_gap                    0
hc set wmname                        herbstluftwm



# THEMES: active, normal, floating, fullscreen, minimal, tiling, urgent
hc attr theme.active.reset 1
hc attr theme.normal.reset 1
hc attr theme.floating.reset 1
hc attr theme.fullscreen.reset 1

# hc attr theme.title_color       black
# hc attr theme.title_font        fixed

# hc attr theme.title_height      0
# hc attr theme.outer_color       $darkgrey
# hc attr theme.outer_width       4
hc attr theme.color             $darkgrey
    hc attr theme.active.color      $blue
hc attr theme.border_width      2
# hc attr theme.inner_color       black
# hc attr theme.inner_width       4
# hc attr theme.padding_bottom    0
# hc attr theme.padding_left      0
# hc attr theme.padding_right     0
# hc attr theme.padding_top       0
# hc attr theme.background_color  black
# hc attr theme.tight_decoration  false

# unlock, just to be sure
hc unlock

# do multi monitor setup here, e.g.:
# hc set_monitors 1280x1024+0+0 1280x1024+1280+0
# or simply:
hc detect_monitors

# find the panel
# panel=$XDG_CONFIG_HOME/herbstluftwm/panel.sh
# [ -x "$panel" ] || panel=/etc/xdg/herbstluftwm/panel.sh
# for monitor in $(hc list_monitors | cut -d: -f1) ; do
#     # start it on each monitor
#     "$panel" "$monitor" &
# done
